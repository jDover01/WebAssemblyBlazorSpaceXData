@page "/spacexdata"
@inject HttpClient Http
@inject IJSRuntime JS

<h1>Space X Data</h1>

@if (missions == null)
{
    <p><em>Loading Space X Data Missions...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th" @onclick="@(() => SortTable("RocketName"))">
                    RocketName
                    <span class="@(SetSortIcon("RocketName"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("MissionDate"))">
                    MissionDate
                    <span class="@(SetSortIcon("MissionDate"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("LaunchSuccess"))">
                    LaunchSuccess
                    <span class="@(SetSortIcon("LaunchSuccess"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("PayloadMass"))">
                    PayloadMass
                    <span class="@(SetSortIcon("PayloadMass"))"></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("Rank"))">
                    Rank
                    <span class="@(SetSortIcon("Rank"))"></span>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var mission in missions)
            {
                <tr>
                    <td>@mission.RocketName</td>
                    <td>@mission.MissionDate</td>
                    <td>@mission.LaunchSuccess</td>
                    <td>@mission.PayloadMass</td>
                    <td>@mission.Rank</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private SpaceXDataModels.Mission[] missions;
    private bool isSortedAscending;
    private string activeSortColumn;

    protected override async Task OnInitializedAsync()
    {
        //GET THE MISSIONS ARRAY FROM JAVASCRIPT BY USING JSRUNTIME
        missions = await JS.InvokeAsync<SpaceXDataModels.Mission[]>("GetMissions");

        //ORDER THE DATA CHRONOLOGICAL BY MISSION DATE BY DEFAULT
        await JS.InvokeAsync<string>("DefaultSort");
    }

    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            missions = missions.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToArray();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                missions = missions.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToArray();
            }
            else
            {
                missions = missions.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToArray();
            }
            isSortedAscending = !isSortedAscending;
        }
    }
    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return "custom";
        }
        if (isSortedAscending)
        {
            return "fas fa-sort-up";
        }
        else
        {
            return "fas fa-sort-down";
        }
    }
}
